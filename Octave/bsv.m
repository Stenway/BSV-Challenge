# (C) Stefan John / Stenway / Stenway.com / 2023
1;

function result = isValidUtf8(str)
  utf8ByteClassLookup = [
    0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,	0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,	0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3,	0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,	0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,	0x0, 0x0, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5,	0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5,	0x6, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x8, 0x7, 0x7,	0x9, 0xA, 0xA, 0xA, 0xB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
  ];

  utf8StateTransitionLookup = [
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x3, 0x5, 0x4, 0x6, 0x7, 0x8,	0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x5, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,	0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
  ];

  bytes = uint8(str);
  lastState = 1;
  for i = 1:length(bytes)
    currentByte = bytes(i);
    currentByteClass = utf8ByteClassLookup(currentByte+1);
    newStateLookupIndex = lastState*12 + currentByteClass;
    lastState = utf8StateTransitionLookup(newStateLookupIndex+1);
    if lastState == 0
      result = false;
      return;
    end
  end
  result = (lastState == 1);
end

# ----------------------------------------------------------------------

function result = decodeBsv(bytes)
  result = {};
  currentLine = {};
  currentIndex = -1;
  while true
    lastIndex = currentIndex;
    valueBytesLength = 0;
    while true
      currentIndex = currentIndex + 1;
      if currentIndex >= length(bytes)
        currentIndex = -1;
        valueBytesLength = length(bytes) - lastIndex - 1;
        break;
      end
      if bytes(currentIndex+1) >= 0xFE
        valueBytesLength = currentIndex - lastIndex - 1;
        break;
      end
    end
    if valueBytesLength == 1 && bytes(lastIndex+2) == hex2dec('FD')
      currentLine{end+1} = {};
    elseif valueBytesLength == 1 && bytes(lastIndex+2) == hex2dec('FC')
      currentLine{end+1} = "";
    elseif valueBytesLength >= 1
      valueBytes = bytes(lastIndex+2:lastIndex+1+valueBytesLength);
      strValue = native2unicode(transpose(valueBytes), 'UTF-8');
      if ~isValidUtf8(strValue)
        error("Invalid string value");
      end
      currentLine{end+1} = strValue;
    elseif ~(((currentIndex >= 0 && bytes(currentIndex+1) == 0xFF) || (currentIndex < 0)) && ((lastIndex < 0) || (lastIndex >= 0 && bytes(lastIndex+1) == 0xFF)))
        error("Invalid BSV value byte sequence");
    end
    if currentIndex < 0
      break;
    elseif currentIndex >= 0 && bytes(currentIndex+1) == 0xFF
      result{end+1} = currentLine;
      currentLine = {};
    end
  end
  result{end+1} = currentLine;
end

# ----------------------------------------------------------------------

function []=saveBsv(jaggedArray, filePath)
  file = fopen(filePath, "w");
  isFirstLine = true;
  for i = 1:length(jaggedArray)
    if ~isFirstLine
      fwrite(file, 0xFF);
    end
    isFirstLine = false;
    currentLine = jaggedArray{i};
    isFirstValue = true;
    for j = 1:length(currentLine)
      value = currentLine{j};
      if ~isFirstValue
        fwrite(file, 0xFE);
      end
      isFirstValue = false;
      if isequal(value, "")
        fwrite(file, 0xFC);
      elseif isempty(value)
        fwrite(file, 0xFD);
      else
        if ~isValidUtf8(value)
          error("Invalid string value");
        end
        fprintf(file, value);
      end
    end
  end
  fclose(file);
end

function result=loadBsv(filePath)
  file = fopen(filePath, "r");
  bytes = fread(file);
  fclose(file);
  result = decodeBsv(bytes);
end

# ----------------------------------------------------------------------

function result=jaggedArrayToString(jaggedArray)
  result = "[";
  for i = 1:length(jaggedArray)
    result = [result "\n  ["];
    isFirst = true;
    currentLine = jaggedArray{i};
    for j = 1:length(currentLine)
      value = currentLine{j};
      if ~isFirst
        result = [result ", "];
      end
      isFirst = false;
      if isequal(value, "")
        result = [result "\"\""];
      elseif isempty(value)
        result = [result "null"];
      else
        result = [result "\"" strrep(strrep(value, "\n", "\\n"), "\0", "\\0") "\""];
      end
    end
    result = [result "]"];
  end
  result = [result "\n]"];
end

# ----------------------------------------------------------------------

jaggedArray = {
  {"Hello", "üåé", {}, ""};
  {"A\0B\nC", "Test ùÑû"}
};

disp(jaggedArrayToString(jaggedArray))
saveBsv(jaggedArray, "Test.bsv")

loadedJaggedArray = loadBsv("Test.bsv");
disp(jaggedArrayToString(loadedJaggedArray))

saveBsv(loadedJaggedArray, "TestResaved.bsv")

