# (C) Stefan John / Stenway / Stenway.com / 2023

$utf8_byte_class_lookup = [
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
	0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
	0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3,
	0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
	0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
	0x0, 0x0, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5,
	0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5,
	0x6, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x8, 0x7, 0x7,
	0x9, 0xA, 0xA, 0xA, 0xB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
]

$utf8_state_transition_lookup = [
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x3, 0x5, 0x4, 0x6, 0x7, 0x8,
	0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x5, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
]

def is_valid_utf8(bytes)
	lastState = 1
	for i in 0..bytes.size-1 do
		currentByte = bytes[i]
		currentByteClass = $utf8_byte_class_lookup[currentByte]
		newStateLookupIndex = lastState * 12 + currentByteClass
		lastState = $utf8_state_transition_lookup[newStateLookupIndex]
		if lastState == 0
			return false
		end
	end
	return lastState == 1
end

# ----------------------------------------------------------------------

def encode_bsv(jagged_array)
	result = ""
	is_first_line = true
	jagged_array.each do |line|
		if !is_first_line
			result << "\xFF"
		end
		is_first_line = false
		is_first_value = true
		line.each do |value|
			if !is_first_value
				result << "\xFE"
			end
			is_first_value = false
			if value.nil?
				result << "\xFD"
			elsif value == ""
				result << "\xFC"
			else
				if not is_valid_utf8(value.bytes)
					raise "Invalid string value"
				end
				result << value
			end
		end
	end
	return result
end

def decode_bsv(bytes)
	result = []
	current_line = []
	current_index = -1
	loop do
		last_index = current_index
		value_bytes_length = nil
		loop do
			current_index += 1
			if current_index >= bytes.size
				current_index = -1
				value_bytes_length = bytes.size - last_index - 1
				break
			end
			if bytes[current_index] >= 0xFE
				value_bytes_length = current_index - last_index - 1
				break
			end
		end
		if value_bytes_length == 1 && bytes[last_index + 1] == 0xFD
			current_line.push(nil)
		elsif value_bytes_length == 1 && bytes[last_index + 1] == 0xFC
			current_line.push("")
		elsif value_bytes_length >= 1
			value_bytes = bytes[last_index + 1, value_bytes_length]
			if not is_valid_utf8(value_bytes)
				raise "Invalid string value"
			end
			str_value = value_bytes.pack('C*').force_encoding('UTF-8')
			current_line.push(str_value)
		elsif !(((current_index >= 0 && bytes[current_index] == 0xFF) || (current_index == 0 && bytes[last_index] == 0xFF))) == false
			raise "Invalid BSV value byte sequence"
		end
		if current_index < 0
			break
		elsif current_index >= 0 && bytes[current_index] == 0xFF
			result.push(current_line)
			current_line = []
		end
	end
	result.push(current_line)
	return result
end

# ----------------------------------------------------------------------

def save_bsv(jagged_array, file_path)
	bytes = encode_bsv(jagged_array)
	bytes_str = File.binwrite(file_path, bytes)
end

def load_bsv(file_path)
	bytes_str = File.binread(file_path)
	return decode_bsv(bytes_str.bytes)
end

# ----------------------------------------------------------------------

def jagged_array_to_string(jagged_array)
	result = "["
	jagged_array.each do |line|
		result << "\n ["
		is_first = true
		line.each do |value|
			if !is_first
				result << ", "
			end
			is_first = false
			if value.nil?
				result << "null"
			else
				result << "\"#{value.gsub("\n", "\\n").gsub("\0", "\\0")}\""
			end
		end
		result << "]"
	end
	result << "\n]" 
	return result
end

# ----------------------------------------------------------------------

jagged_array = [
	["Hello", "🌎", nil, ""],
	["A\0B\nC", "Test 𝄞"]
]

puts jagged_array_to_string(jagged_array)
save_bsv(jagged_array, "Test.bsv")

loaded_jagged_array = load_bsv("Test.bsv")
puts jagged_array_to_string(loaded_jagged_array)

save_bsv(loaded_jagged_array, "TestResaved.bsv")